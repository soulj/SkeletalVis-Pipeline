<tool id="multiqc" name="multiqc" version="@WRAPPER_VERSION@.0">
    <description>aggregate results from bioinformatics analyses into a single report</description>
    <macros>
        <token name="@WRAPPER_VERSION@">1.1</token>
    </macros>
    <requirements>
       <requirement type="package" version="@WRAPPER_VERSION@">multiqc</requirement>
    </requirements>
    <version_command>@WRAPPER_VERSION@</version_command>
    <command detect_errors="aggressive">
<![CDATA[
mkdir multiqc_WDir &&

#set $configfile="F"

#for $i, $repeat in enumerate( $results )
    mkdir multiqc_WDir/${repeat.software_cond.software}_${i} &&

    #if str($repeat.software_cond.software) == "fastqc":
        ## Searches for files named "fastqc_data.txt"
        #for $k, $file in enumerate($repeat.input_file):
            mkdir multiqc_WDir/${repeat.software_cond.software}_${i}/file_${k} &&
            ln -s '${file}' multiqc_WDir/fastqc_${i}/file_${k}/fastqc_data.txt &&
        #end for
    #else if str($repeat.software_cond.software) == "tophat":
        ## Searches for files ending in "align_summary.txt"
        #for $file in $repeat.input_file:
            ln -s '${file}' 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}align_summary.txt' &&
        #end for
    #else if str($repeat.software_cond.software) == "bowtie2":
        ## Searches for files containing 'reads; of these;'
        #for $file in $repeat.input_file:
            ln -s '${file}' 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}.txt' &&
        #end for
    #else if str($repeat.software_cond.software) == "cutadapt":
        ## Searches for files containing 'This is cutadapt'
        #for $file in $repeat.input_file:
            cat '${file}' > 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}.txt' &&
            ## replace header for old cutadapt release
            sed -i .old 's/You are running/This is/' 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}.txt' &&
        #end for
    #else if str($repeat.software_cond.software) == "featurecounts":
        ## Checks for files ending in '.summary'
        #for $file in $repeat.input_file
            #if $file.metadata.column_names and $file.metadata.column_names.find(',') != -1
                echo '$file.metadata.column_names.replace(',','\t').replace('__ob__u','').replace('u__sq__','').replace('__sq__','').replace('__cb__','')' >> 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}.summary' &&
                cat '$file' >> 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}.summary' &&
            #else
                ln -s '$file' 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}.summary' &&
            #end if
        #end for
    #else if str($repeat.software_cond.software) == "bismark":
        ## Checks for files ending in _SE_report.txt
        #for $file in $repeat.input_file
            ln -s ${file} 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}_SE_report.txt' &&
        #end for
    #else if str($repeat.software_cond.software) == "samtools":
        ## Checks for files containing 'This file was produced by samtools stats'
        #for $file in $repeat.input_file
            ln -s ${file} 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}' &&
        #end for
    #else if str($repeat.software_cond.software) == "picard":
        #for $file in $repeat.input_file
            ln -s '${file}' 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}' &&
        #end for
    #else if str($repeat.software_cond.software) == "samtools_idxstats":
        ## Checks for files containing "idxstats" in the name
        #for $file in $repeat.input_file
            ln -s '${file}' 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}_idxstats.txt' &&
        #end for
    #else if str($repeat.software_cond.software) == "htseq":
        ## Checks for files containing "__too_low_aQual"
        #for $file in $repeat.input_file
            ln -s '${file}' 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}' &&
        #end for
    #else if str($repeat.software_cond.software) == "rnastar_log":
        ## Checks for files named Log.final.out
        #for $k, $file in enumerate($repeat.input_file):
            mkdir 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}' &&
            ln -s '${file}' 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}/Log.final.out' &&
        #end for
    #else if str($repeat.software_cond.software) == "rnastar_counts":
        ## Checks for files named ReadsPerGene.out.tab
        #for $k, $file in enumerate($repeat.input_file):
            mkdir 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}' &&
            ln -s '${file}' 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}/ReadsPerGene.out.tab' &&
        #end for
    #else if str($repeat.software_cond.software) == "custom_content":
        #if str($repeat.software_cond.cc_cond.cc_select) == "manual":
            #set $configfile = "T"
        #end if
        ## Checks for files named *_mqc.out
        #for $k, $file in enumerate($repeat.input_file):
            mkdir 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}' &&
            ln -s '${file}' 'multiqc_WDir/${repeat.software_cond.software}_${i}/${file.element_identifier}_${i}_mqc.out' &&
        #end for
    #else if str($repeat.software_cond.software) == "kallisto":
        ## Checks for files named ____
        #for $file in $repeat.input_file:
            ln -s '${file}' 'multiqc_WDir/${file.element_identifier}_kallisto_log.txt' &&
        #end for
    #end if
#end for

multiqc multiqc_WDir

#if $configfile == "T"
    -c '$multiqc_config'
#end if

    ]]></command>

    <configfiles>
        <configfile name="multiqc_config">
custom_data:
#for $i, $repeat in enumerate( $results )
    #if str($repeat.software_cond.software) == "custom_content":
        #if str($repeat.software_cond.cc_cond.cc_select) == "manual":
    section_$i:
        file_format: 'tsv'
        section_name: '$repeat.software_cond.cc_cond.section_name'
        title: '$repeat.software_cond.cc_cond.title'
        description: '$repeat.software_cond.cc_cond.description'
        plot_type: '$repeat.software_cond.cc_cond.plot_type'
        pconfig:
            id: 'section_${i}_${repeat.software_cond.cc_cond.plot_type}'
            ylab: 'repeat.software_cond.cc_cond.ylab'
            xlab: 'repeat.software_cond.cc_cond.xlab'
        #end if
    #end if
#end for
sp:
#for $i, $repeat in enumerate( $results )
    #if str($repeat.software_cond.software) == "custom_content":
        #if str($repeat.software_cond.cc_cond.cc_select) == "manual":
    section_$i:
        fn: '*_${i}_mqc.out'
        #end if
    #end if
#end for

        </configfile>
    </configfiles>

    <inputs>
        <repeat name="results" title="Results" min="1">
            <conditional name="software_cond">
                <param name="software" type="select" label="Software name" help="Which tool was used generate logs?">
                    <option value="fastqc">FastQC</option>
                    <option value="cutadapt">Cutadapt/Trim Galore!</option>
                    <option value="tophat">Tophat2</option>
                    <option value="featurecounts">FeatureCounts (Summary file)</option>
                    <option value="samtools">Samtools (Stats, Flagstat)</option>
                    <option value="samtools_idxstats">Samtools (Idxstats)</option>
                    <option value="picard">Picard</option>
                    <option value="bismark">Bismark</option>
                    <option value="bowtie2">Bowtie2</option>
                    <option value="htseq">HTSeq-Count</option>
                    <option value="rnastar_log">RNA STAR (log)</option>
                    <option value="rnastar_counts">RNA STAR (reads per gene)</option>
                    <option value="custom_content">Custom Content (Generic tabular file)</option>
		    <option value="kallisto">Kallisto</option>
                </param>
                <when value="fastqc" />
                <when value="cutadapt" />
                <when value="tophat" />
                <when value="featurecounts" />
                <when value="samtools" />
                <when value="samtools_idxstats" />
                <when value="picard" />
                <when value="bismark" />
                <when value="bowtie2" />
                <when value="htseq" />
                <when value="rnastar_log" />
                <when value="rnastar_counts" />
		<when value="kallisto"/>
                <when value="custom_content">
                    <conditional name="cc_cond">
                        <param name="cc_select" type="select" label="MultiQC configuration" help="The configuration set the graph title and axis labels">
                            <option value="embedded">Embedded within the file header</option>
                            <option value="manual">Set manually the configuration</option>
                        </param>
                        <when value="embedded" />
                        <when value="manual">
                            <param argument="plot_type" label="The plot type to visualise the data with" type="select">
                                <option value="linegraph">linegraph</option>
                                <option value="bargraph">bargraph</option>
                                <option value="scatter">scatter</option>
                                <option value="generalstats">generalstats</option>
                                <option value="table">table</option>
                            </param>
                            <param argument="section_name" label="Section name" type="text" help="Nice name used for the report section header" />
                            <param argument="title" label="Title" type="text" help="Plot title" />
                            <param argument="description" label="Description" type="text" help="Introductory text to be printed under the section header" />
                            <param argument="xlab" label="X axis label" type="text" />
                            <param argument="ylab" label="Y axis label" type="text" />
                        </when>
                    </conditional>
                </when>
            </conditional>
            <param name="input_file" type="data" format="txt, tabular" multiple="true" label="Result file" help="Select input datasets"/>
        </repeat>
        <param name="saveLog" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Save log file" help="Save the multiQC log file to the history. This is mostly useful for debugging purposes."/>
    </inputs>
    <outputs>
        <data format="html" from_work_dir="multiqc_report.html" name="html_file" label="${tool.name} on ${on_string}: Webpage" />
        <data format="txt" name="text_file" from_work_dir="multiqc_data/multiqc.log" label="${tool.name} on ${on_string}: Log">
            <filter>saveLog</filter>
        </data>
    </outputs>
    <tests>
	<test>
            <repeat name="results">
                <conditional name="software_cond">
                    <param name="software" value="kallisto" />
                </conditional>
                <param name="input_file" value="kallisto_log.txt,kallisto_log_2.txt" />
            </repeat>
            <output name="html_file" file="report_kallisto.html" compare="sim_size" delta="20000"/>
        </test>
    </tests>

    <help><![CDATA[
**What it does**

MultiQC aggregates results from bioinformatics analyses across many samples into a single report. It takes results of multiple analyses and creates a report that can be viewed as a single beautiful web-page. It's a general use tool, perfect for summarizing the output from numerous bioinformatics tools.

**Inputs**

MultiQC takes software output summaries/logs and creates a single report from them. You need to tell the tool which software was used to generate the report. This is done using the **Software name** dropdown. At present the following Galaxy tools produce logs that can used with MultiQC. There are:

- Fastqc
- Cutadapt / Trim Galore!
- Tophat2
- FeatureCounts (summary file with the column header in the first line or as metadata)
- Samtools (stats, flagstat, dxstats)
- Picard (MarkDuplicatesMetrics, CollectGCBiasMetrics, CollectInsertSizeMetrics, CollectAlignmentSummaryMetrics, CollectRnaSeqMetrics)
- Bismark (Alignment report file)
- Bowtie2 (Metrics file)
- HTSeq-count ("no feature" file; although the "Assigned" metric is always 0)
- RNA STAR (Alignment from Log.final.out, Gene counts from ReadsPerGene.out.tab)
- Custom Content (Generic tabular file)
- Kallisto (Kallisto log file)

----

**Integrated by**

Cyril Monjeaud and Yvan Le Bras

`EnginesOn <http://engineson.fr/>`_ and Rennes GenOuest Bio-informatics Core Facility

    ]]></help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btw354</citation>
    </citations>
</tool>
